import os
import joblib
from flask import Flask, request, render_template, redirect, url_for, flash, jsonify
from werkzeug.utils import secure_filename
from flask import send_from_directory
from modeling import feature_extractor

# Initialize the Flask application
app = Flask(__name__)
app.secret_key = 'your_secret_key'
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['ALLOWED_EXTENSIONS'] = {'pdf', 'application/pdf'}

models = {"Random Forest": joblib.load('./models/RF.pkl'), 
          "SVM": joblib.load('./models/SVM.pkl'), 
          "AdaBoost": joblib.load('./models/AdaBoost.pkl'), 
          "KNN": joblib.load('./models/KNN.pkl'), 
          "DNN": joblib.load('./models/DNN.pkl'), 
          "GBC": joblib.load('./models/GBC.pkl')}

@app.route('/robots.txt')
def robots_txt():
    return send_from_directory(app.static_folder, 'robots.txt')

@app.route('/favicon.ico')
def favicon():
    return send_from_directory(app.static_folder, 'favicon.ico')

def allowed_file(filename):
    return feature_extractor.is_pdf(filename)

def parse_rules(file_path):
    rules = []
    with open(file_path, 'r') as file:
        for idx, line in enumerate(file):
            if line.startswith("if"):
                condition_part, result_part = line.split(" then class: ")
                label, sample_info = result_part.split(" | based on ")
                label = 'Malware' if 'Malware' in label else 'Benign'
                num_samples = sample_info.split(" ")[0]
                rules.append({
                    "ID": idx + 1,
                    "condition": condition_part.strip(),
                    "label": label.strip(),
                    "samples": int(num_samples.strip().replace(',', ''))
                })
    # Sort the rules by the number of samples in descending order
    rules.sort(key=lambda x: x["samples"], reverse=True)
    return rules

@app.route('/')
def index(result=None, selected_model=None, dataframe_html=None):
    rules = parse_rules('modeling/result/decision_rule.txt')
    return render_template('index.html', result=result, selected_model=selected_model, models=models.keys(), dataframe_html=dataframe_html, rules=rules)

@app.route('/upload', methods=['POST', 'GET'])
def upload_file():
    if request.method == 'GET':
        return redirect(url_for('index'))
    
    if 'file' not in request.files:
        return jsonify(flash='No file part')
    
    file = request.files['file']
    
    if file.filename == '':
        return jsonify(flash='No selected file')
    
    selected_model_name = request.form.get('model')
    if selected_model_name not in models:
        return jsonify(flash='Invalid model selected')
    
    filename = secure_filename(file.filename)
    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    file.save(filepath)
    
    if file and allowed_file(filepath):
        model = models[selected_model_name]
        features = feature_extractor.main(filepath)
        prediction = model.predict(features)
        result = str(prediction[0])
        features_html = features.to_html(classes='table table-striped')
        return jsonify(result=result, dataframe_html=features_html)
    
    return jsonify(flash='Invalid file type')

if __name__ == '__main__':
    os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
    app.run(debug=False, port=8889, host='172.26.52.24')
